// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// Modified by the Tsu (https://github.com/GGG-KILLER/Tsu) project for embedding into other projects.
// <auto-generated />

#nullable enable

namespace Tsu.Trees.RedGreen.Sample
{
    using System.Collections;
    using System.Collections.Generic;

    public readonly partial struct SampleList<TNode>
    {
        /// <summary>
        /// The enumerator for <see cref="SampleList{TNode}"/>.
        /// </summary>
        #pragma warning disable IDE0079 // Remove unnecessary suppression
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "CA1067", Justification = "Equality not actually implemented")]
#pragma warning restore IDE0079 // Remove unnecessary suppression
        public struct Enumerator
        {
            private readonly SampleList<TNode> _list;
            private int _index;

            internal Enumerator(SampleList<TNode> list)
            {
                _list = list;
                _index = -1;
            }

            /// <inheritdoc cref="IEnumerator.MoveNext"/>
            public bool MoveNext()
            {
                int newIndex = _index + 1;
                if (newIndex < _list.Count)
                {
                    _index = newIndex;
                    return true;
                }

                return false;
            }

            /// <inheritdoc cref="IEnumerator{T}.Current"/>
            public TNode Current => (TNode) _list.ItemInternal(_index)!;

            /// <inheritdoc cref="IEnumerator.Reset"/>
            public void Reset() => _index = -1;

            /// <summary>
            /// Not supported. Do not call.
            /// </summary>
            /// <param name="obj"></param>
            /// <returns></returns>
            /// <exception cref="NotSupportedException">
            /// Always thrown.
            /// </exception>
            public override bool Equals(object? obj) =>
                throw new NotSupportedException();

            /// <summary>
            /// Not supported. Do not call.
            /// </summary>
            /// <returns></returns>
            /// <exception cref="NotSupportedException">
            /// Always thrown.
            /// </exception>
            public override int GetHashCode() => throw new NotSupportedException();

            /// <summary>
            /// Not supported. Do not use.
            /// </summary>
            /// <param name="left"></param>
            /// <param name="right"></param>
            /// <returns></returns>
            /// <exception cref="NotSupportedException">
            /// Always thrown.
            /// </exception>
#pragma warning disable IDE0079 // Remove unnecessary suppression
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE0060:Remove unused parameter", Justification = "Required.")]
#pragma warning restore IDE0079 // Remove unnecessary suppression
            public static bool operator ==(SampleList<TNode>.Enumerator left, SampleList<TNode>.Enumerator right) =>
                throw new NotSupportedException();

            /// <summary>
            /// Not supported. Do not use.
            /// </summary>
            /// <param name="left"></param>
            /// <param name="right"></param>
            /// <exception cref="NotSupportedException">
            /// Always thrown.
            /// </exception>
#pragma warning disable IDE0079 // Remove unnecessary suppression
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE0060:Remove unused parameter", Justification = "Required.")]
#pragma warning restore IDE0079 // Remove unnecessary suppression
            public static bool operator !=(SampleList<TNode>.Enumerator left, SampleList<TNode>.Enumerator right) =>
                throw new NotSupportedException();
        }

        private class EnumeratorImpl : IEnumerator<TNode>
        {
            private Enumerator _e;

            internal EnumeratorImpl(in SampleList<TNode> list)
            {
                _e = new Enumerator(list);
            }

            public bool MoveNext() => _e.MoveNext();

            public TNode Current => _e.Current;

            void IDisposable.Dispose()
            {
            }

            object IEnumerator.Current => _e.Current;

            void IEnumerator.Reset() => _e.Reset();
        }
    }
}
