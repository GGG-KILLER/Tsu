// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// Modified by the Tsu (https://github.com/GGG-KILLER/Tsu) project for embedding into other projects.
// <auto-generated />

#nullable enable

namespace Tsu.Trees.RedGreen.Sample
{
    // This is a hidden builder since it deals with opaque nodes and allows for invalid conversions.
    internal class SampleListBuilder
    {
        private global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode?[] _nodes;
        public int Count { get; private set; }

        public SampleListBuilder(int size)
        {
            _nodes = new global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode?[size];
        }

        public void Clear() => Count = 0;

        public void Add(global::Tsu.Trees.RedGreen.Sample.SampleNode item) => AddInternal(item.Green);

#pragma warning disable IDE0079 // Remove unnecessary suppression
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE0016:Use 'throw' expression", Justification = "The throw exception being early avoids resizing in the error case.")]
#pragma warning restore IDE0079 // Remove unnecessary suppression
        internal void AddInternal(global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode item)
        {
            if (item is null) throw new ArgumentNullException(nameof(item));
            if (Count >= _nodes.Length)
            {
                Grow(Count == 0 ? 8 : _nodes.Length * 2);
            }

            _nodes[Count++] = item;
        }

        public void AddRange(global::Tsu.Trees.RedGreen.Sample.SampleNode[] items) => AddRange(items, 0, items.Length);

        public void AddRange(global::Tsu.Trees.RedGreen.Sample.SampleNode[] items, int offset, int length)
        {
            if (Count + length > _nodes.Length)
            {
                Grow(Count + length);
            }

            for (int i = offset, j = Count; i < offset + length; ++i, ++j)
            {
                _nodes[j] = items[i].Green;
            }

            int start = Count;
            Count += length;
            Validate(start, Count);
        }

        private void Validate(int start, int end)
        {
            for (int i = start; i < end; i++)
            {
                if (_nodes[i] == null)
                {
                    throw new ArgumentException("Cannot add a null node.");
                }
            }
        }

        public void AddRange(SampleList<global::Tsu.Trees.RedGreen.Sample.SampleNode> list) => AddRange(list, 0, list.Count);

        public void AddRange(SampleList<global::Tsu.Trees.RedGreen.Sample.SampleNode> list, int offset, int count)
        {
            if (Count + count > _nodes.Length)
            {
                Grow(Count + count);
            }

            var dst = Count;
            for (int i = offset, limit = offset + count; i < limit; i++)
            {
                _nodes[dst] = list.ItemInternal(i)!.Green;
                dst++;
            }

            int start = Count;
            Count += count;
            Validate(start, Count);
        }

        public void AddRange<TNode>(SampleList<TNode> list) where TNode : global::Tsu.Trees.RedGreen.Sample.SampleNode =>
            AddRange(list, 0, list.Count);

        public void AddRange<TNode>(SampleList<TNode> list, int offset, int count) where TNode : global::Tsu.Trees.RedGreen.Sample.SampleNode =>
            AddRange(new SampleList<global::Tsu.Trees.RedGreen.Sample.SampleNode>(list.Node), offset, count);

        private void Grow(int size)
        {
            var tmp = new global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode?[size];
            Array.Copy(_nodes, tmp, _nodes.Length);
            _nodes = tmp;
        }

        public bool Any(global::Tsu.Trees.RedGreen.Sample.SampleKind kind)
        {
            for (int i = 0; i < Count; i++)
            {
                if (_nodes[i]!.Kind == kind)
                {
                    return true;
                }
            }

            return false;
        }

        internal global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode? ToListNode()
        {
            switch (Count)
            {
                case 0:
                    return null;
                case 1:
                    return _nodes[0];
                case 2:
                    return global::Tsu.Trees.RedGreen.Sample.Internal.SampleList.List(_nodes[0]!, _nodes[1]!);
                case 3:
                    return global::Tsu.Trees.RedGreen.Sample.Internal.SampleList.List(_nodes[0]!, _nodes[1]!, _nodes[2]!);
                default:
                    var tmp = new global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode[Count];
                    for (int i = 0; i < Count; i++)
                    {
                        tmp[i] = _nodes[i]!;
                    }

                    return global::Tsu.Trees.RedGreen.Sample.Internal.SampleList.List(tmp);
            }
        }

        public static implicit operator SampleList<global::Tsu.Trees.RedGreen.Sample.SampleNode>(SampleListBuilder builder)
        {
            if (builder == null)
            {
                return default;
            }

            return builder.ToList();
        }

        internal void RemoveLast()
        {
            Count -= 1;
            _nodes[Count] = default;
        }
    }
}
