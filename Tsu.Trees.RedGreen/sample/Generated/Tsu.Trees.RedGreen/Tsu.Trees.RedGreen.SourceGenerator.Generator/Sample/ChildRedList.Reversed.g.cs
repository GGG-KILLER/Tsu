// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// Modified by the Tsu (https://github.com/GGG-KILLER/Tsu) project for embedding into other projects.
// <auto-generated />

#nullable enable

namespace Tsu.Trees.RedGreen.Sample
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;

    public readonly partial struct ChildSampleList
    {
        /// <summary>
        /// An enumerator that enumerates the list in reverse order.
        /// </summary>
        public readonly partial struct Reversed : IEnumerable<global::Tsu.Trees.RedGreen.Sample.SampleNode>, IEquatable<Reversed>
        {
            private readonly global::Tsu.Trees.RedGreen.Sample.SampleNode? _node;
            private readonly int _count;

            internal Reversed(global::Tsu.Trees.RedGreen.Sample.SampleNode? node, int count)
            {
                _node = node;
                _count = count;
            }

            /// <summary>
            /// Returns the enumerator for this list.
            /// </summary>
            /// <returns></returns>
            public Enumerator GetEnumerator()
            {
                return new Enumerator(_node, _count);
            }

            IEnumerator<global::Tsu.Trees.RedGreen.Sample.SampleNode> IEnumerable<global::Tsu.Trees.RedGreen.Sample.SampleNode>.GetEnumerator() =>
                new EnumeratorImpl(_node, _count);

            IEnumerator IEnumerable.GetEnumerator() => new EnumeratorImpl(_node, _count);

            /// <inheritdoc/>
            public override int GetHashCode() =>
                _node != null ? (_node.GetHashCode() ^ _count) : 0;

            /// <inheritdoc/>
            public override bool Equals(object? obj) =>
                (obj is Reversed r) && Equals(r);

            /// <inheritdoc/>
            public bool Equals(Reversed other)
            {
                return _node == other._node
                    && _count == other._count;
            }

            /// <summary>
            /// Checks whether two reversed lists are equal.
            /// </summary>
            /// <param name="left"></param>
            /// <param name="right"></param>
            /// <returns></returns>
            public static bool operator ==(Reversed left, Reversed right) => left.Equals(right);

            /// <summary>
            /// Checks whether two reversed lists are not equal.
            /// </summary>
            /// <param name="left"></param>
            /// <param name="right"></param>
            /// <returns></returns>
            public static bool operator !=(Reversed left, Reversed right) => !(left == right);

            /// <summary>
            /// Enumerates the nodes in this reversed children list.
            /// </summary>
            public struct Enumerator
            {
                private readonly global::Tsu.Trees.RedGreen.Sample.SampleNode? _node;
                private readonly int _count;
                private int _childIndex;

                internal Enumerator(global::Tsu.Trees.RedGreen.Sample.SampleNode? node, int count)
                {
                    _node = node;
                    _count = count;
                    _childIndex = count;
                }

                /// <summary>
                /// Moves to the next element.
                /// </summary>
                /// <returns>Whether there was another element to move to.</returns>
                [MemberNotNullWhen(true, nameof(_node))]
                public bool MoveNext()
                {
                    if (_node != null)
                    {
                        var newIndex = _childIndex - 1;
                        if (newIndex >= 0)
                        {
                            _childIndex = newIndex;
                            return true;
                        }
                    }

                    return false;
                }

                /// <summary>
                /// The element the enumerator is at.
                /// </summary>
                public global::Tsu.Trees.RedGreen.Sample.SampleNode Current
                {
                    get
                    {
                        if (_node is null)
                            throw new InvalidOperationException("No node to iterate over the children of.");
                        return ItemInternal(_node, _childIndex);
                    }
                }

                /// <summary>
                /// Resets the enumerator to the last element.
                /// </summary>
                public void Reset() => _childIndex = _count;
            }

            private class EnumeratorImpl : IEnumerator<global::Tsu.Trees.RedGreen.Sample.SampleNode>
            {
                private Enumerator _enumerator;

                internal EnumeratorImpl(global::Tsu.Trees.RedGreen.Sample.SampleNode? node, int count)
                {
                    _enumerator = new Enumerator(node, count);
                }

                /// <summary>
                /// Gets the element in the collection at the current position of the enumerator.
                /// </summary>
                /// <returns>
                /// The element in the collection at the current position of the enumerator.
                ///   </returns>
                public global::Tsu.Trees.RedGreen.Sample.SampleNode Current => _enumerator.Current;

                /// <summary>
                /// Gets the element in the collection at the current position of the enumerator.
                /// </summary>
                /// <returns>
                /// The element in the collection at the current position of the enumerator.
                ///   </returns>
                object IEnumerator.Current => _enumerator.Current;

                /// <summary>
                /// Advances the enumerator to the next element of the collection.
                /// </summary>
                /// <returns>
                /// true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
                /// </returns>
                /// <exception cref="InvalidOperationException">The collection was modified after the enumerator was created. </exception>
                public bool MoveNext() => _enumerator.MoveNext();

                /// <summary>
                /// Sets the enumerator to its initial position, which is before the first element in the collection.
                /// </summary>
                /// <exception cref="InvalidOperationException">The collection was modified after the enumerator was created. </exception>
                public void Reset() => _enumerator.Reset();

                /// <summary>
                /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
                /// </summary>
                public void Dispose()
                { }
            }
        }
    }
}