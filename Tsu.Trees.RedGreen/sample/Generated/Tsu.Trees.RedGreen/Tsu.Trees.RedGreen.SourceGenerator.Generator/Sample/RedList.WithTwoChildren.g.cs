// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// Modified by the Tsu (https://github.com/GGG-KILLER/Tsu) project for embedding into other projects.
// <auto-generated />

#nullable enable

namespace Tsu.Trees.RedGreen.Sample
{
    // This is supposed to be a hidden node so it is marked as internal.
    internal abstract partial class SampleList : global::Tsu.Trees.RedGreen.Sample.SampleNode
    {
        // This is supposed to be a hidden node so it is marked as internal.
        internal class WithTwoChildren : SampleList
        {
            private global::Tsu.Trees.RedGreen.Sample.SampleNode? _child0;
            private global::Tsu.Trees.RedGreen.Sample.SampleNode? _child1;

            internal WithTwoChildren(global::Tsu.Trees.RedGreen.Sample.Internal.SampleList green, global::Tsu.Trees.RedGreen.Sample.SampleNode? parent)
                : base(green, parent)
            {
            }

            internal override global::Tsu.Trees.RedGreen.Sample.SampleNode? GetNodeSlot(int index)
            {
                return index switch
                {
                    0 => GetRedElement(ref _child0, 0),
                    1 => GetRedElement(ref _child1, 1),
                    _ => null,
                };
            }
        }
    }
}
