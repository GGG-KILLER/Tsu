// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// Modified by the Tsu (https://github.com/GGG-KILLER/Tsu) project for embedding into other projects.
// <auto-generated />

#nullable enable

using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;

namespace Tsu.Trees.RedGreen.Sample.Internal
{
    internal readonly partial struct SampleList<TNode> : global::System.IEquatable<SampleList<TNode>>
        where TNode : global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode
    {
        private readonly global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode? _node;

        internal SampleList(global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode? node)
        {
            _node = node;
        }

        internal global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode? Node => _node;

        public int Count => _node == null ? 0 : (_node.IsList ? _node.SlotCount : 1);

        public TNode? this[int index]
        {
            get
            {
                if (_node == null)
                {
                    return null;
                }
                else if (_node.IsList)
                {
                    global::System.Diagnostics.Debug.Assert(index >= 0);
                    global::System.Diagnostics.Debug.Assert(index <= _node.SlotCount);

                    return (TNode?) _node.GetSlot(index);
                }
                else if (index == 0)
                {
                    return (TNode?) _node;
                }
                else
                {
                    throw new global::System.InvalidOperationException("The program has reached a state that was thought to be unreachable.");
                }
            }
        }

        internal TNode GetRequiredItem(int index)
        {
            var node = this[index];
            global::System.Diagnostics.Debug.Assert(node is object);
            return node!;
        }

        internal global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode? ItemUntyped(int index)
        {
            global::System.Diagnostics.Debug.Assert(_node is not null);
            var node = _node!;
            if (node.IsList)
            {
                return node.GetSlot(index);
            }

            global::System.Diagnostics.Debug.Assert(index == 0);
            return node;
        }

        public bool Any() => _node != null;

        public bool Any(global::Tsu.Trees.RedGreen.Sample.SampleKind kind)
        {
            foreach (var element in this)
            {
                if (element.Kind == kind)
                {
                    return true;
                }
            }

            return false;
        }

        internal TNode[] Nodes
        {
            get
            {
                var arr = new TNode[Count];
                for (int i = 0; i < Count; i++)
                {
                    arr[i] = GetRequiredItem(i);
                }
                return arr;
            }
        }

        public TNode? Last
        {
            get
            {
                global::System.Diagnostics.Debug.Assert(_node is not null);
                var node = _node!;
                if (node.IsList)
                {
                    return (TNode?) node.GetSlot(node.SlotCount - 1);
                }

                return (TNode?) node;
            }
        }

        public Enumerator GetEnumerator() => new(this);

        internal void CopyTo(int offset, global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode[] array, int arrayOffset, int count)
        {
            for (int i = 0; i < count; i++)
            {
                array[arrayOffset + i] = GetRequiredItem(i + offset);
            }
        }

        public static bool operator ==(SampleList<TNode> left, SampleList<TNode> right) =>
            left._node == right._node;

        public static bool operator !=(SampleList<TNode> left, SampleList<TNode> right) =>
            left._node != right._node;

        public bool Equals(SampleList<TNode> other) => _node == other._node;

        public override bool Equals(object? obj) => (obj is SampleList<TNode> list) && Equals(list);

        public override int GetHashCode() => _node != null ? _node.GetHashCode() : 0;

        public static implicit operator SampleList<TNode>(TNode node) => new(node);

        public static implicit operator SampleList<TNode>(SampleList<global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode> nodes) => new(nodes._node);

        public static implicit operator SampleList<global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode>(SampleList<TNode> nodes) => new(nodes.Node);
    }
}
