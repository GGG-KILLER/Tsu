// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// Modified by the Tsu (https://github.com/GGG-KILLER/Tsu) project for embedding into other projects.
// <auto-generated />

#nullable enable

namespace Tsu.Trees.RedGreen.Sample.Internal
{
    internal partial class SampleList
    {
        internal class WithTwoChildren : SampleList
        {
            private readonly global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode _child0;
            private readonly global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode _child1;

            internal WithTwoChildren(global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode child0, global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode child1)
            {
                SlotCount = 2;
                _child0 = child0;
                _child1 = child1;
            }

            public override global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode? GetSlot(int index)
            {
                return index switch
                {
                    0 => _child0,
                    1 => _child1,
                    _ => null,
                };
            }

            internal override void CopyTo(global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode[] array, int offset)
            {
                array[offset] = _child0;
                array[offset + 1] = _child1;
            }

            public override global::Tsu.Trees.RedGreen.Sample.SampleNode CreateRed(global::Tsu.Trees.RedGreen.Sample.SampleNode? parent) =>
                new global::Tsu.Trees.RedGreen.Sample.SampleList.WithTwoChildren(this, parent);
        }
    }
}
