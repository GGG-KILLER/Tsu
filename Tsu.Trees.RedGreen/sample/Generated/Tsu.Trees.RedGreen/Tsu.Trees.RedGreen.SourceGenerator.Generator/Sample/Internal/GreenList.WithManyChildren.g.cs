// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// Modified by the Tsu (https://github.com/GGG-KILLER/Tsu) project for embedding into other projects.
// <auto-generated />

#nullable enable

namespace Tsu.Trees.RedGreen.Sample.Internal
{
    internal partial class SampleList
    {
        internal sealed class WithManyChildren : SampleList
        {
            internal readonly global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode[] children;

            internal WithManyChildren(global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode[] children)
            {
                this.children = children;
                int n = children.Length;
                if (n < byte.MaxValue)
                {
                    SlotCount = (byte) n;
                }
                else
                {
                    SlotCount = byte.MaxValue;
                }
            }

            protected override int GetSlotCount() => children.Length;

            public override global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode GetSlot(int index) => children[index];

            internal override void CopyTo(global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode[] array, int offset) =>
                Array.Copy(children, 0, array, offset, children.Length);

            public override global::Tsu.Trees.RedGreen.Sample.SampleNode CreateRed(global::Tsu.Trees.RedGreen.Sample.SampleNode? parent) =>
                new global::Tsu.Trees.RedGreen.Sample.SampleList.WithManyChildren(this, parent);
        }
    }
}
