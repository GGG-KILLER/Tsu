// <auto-generated />

#nullable enable

using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;

namespace Tsu.Trees.RedGreen.Sample.Internal
{
    abstract partial class GreenNode : global::Tsu.Trees.RedGreen.Internal.IGreenNode<global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode, global::Tsu.Trees.RedGreen.Sample.SampleNode, global::Tsu.Trees.RedGreen.Sample.SampleKind>
    {
        private readonly global::Tsu.Trees.RedGreen.Sample.SampleKind _kind;
        private byte _slotCount;

        protected GreenNode(global::Tsu.Trees.RedGreen.Sample.SampleKind kind)
        {
            this._kind = kind;
        }

        public global::Tsu.Trees.RedGreen.Sample.SampleKind Kind => this._kind;

        public int SlotCount
        {
            get
            {
                int count = this._slotCount;
                if (count == byte.MaxValue)
                    count = this.GetSlotCount();
                return count;
            }
            protected set => _slotCount = (byte) value;
        }

        public abstract global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode? GetSlot(int slot);

        public global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode GetRequiredSlot(int slot)
        {
            var node = this.GetSlot(slot);
            Debug.Assert((object)node != null)
            return node;
        }

        protected virtual int GetSlotCount() => _slotCount;

        public global::System.Collections.Generic.IEnumerable<global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode> ChildNodes()
        {
            var count = this.SlotCount;
            for (var slot = 0; slot < count; slot++)
                yield return this.GetRequiredSlot(slot);
        }

        public global::System.Collections.Generic.IEnumerable<global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode> EnumerateDescendants()
        {
            var stack = new Stack<global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode>(24);
            stack.Push(this);

            while (stack.Count > 0)
            {
                var current = stack.Pop();

                yield return current;

                foreach (var child in current.ChildNodes().Reverse())
                {
                    stack.Push(child);
                }
            }
        }

        public virtual bool IsEquivalentTo([NotNullWhen(true)] global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode? other)
        {
            if (this == other) return true;
            if (other == null) return false;
            if (this.Kind != other.Kind) return false;

            var n = this.SlotCount;
            if (n != other.SlotCount) return false;

            for (int i = 0; i < n; i++)
            {
                var thisChild = this.GetSlot(i);
                var otherChild = other.GetSlot(i);
                if (thisChild != null && otherChild != null && !thisChild.IsEquivalentTo(otherChild))
                {
                    return false;
                }
            }

            return true;
        }

        public global::Tsu.Trees.RedGreen.Sample.SampleNode CreateRed() => this.CreateRed(null);
        public abstract global::Tsu.Trees.RedGreen.Sample.SampleNode CreateRed(global::Tsu.Trees.RedGreen.Sample.SampleNode? parent);
    }

    abstract partial class ExpressionSample : global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode
    {
        protected ExpressionSample(global::Tsu.Trees.RedGreen.Sample.SampleKind kind) : base(kind)
        {
        }
    }

    partial class IdentifierExpressionSample : global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample
    {
        internal IdentifierExpressionSample(global::Tsu.Trees.RedGreen.Sample.SampleKind kind, string name) : base(kind)
        {
            this.SlotCount = 0;
            this._name = name;
        }
    }

    partial class NumericalLiteralExpressionSample : global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample
    {
        internal NumericalLiteralExpressionSample(global::Tsu.Trees.RedGreen.Sample.SampleKind kind, double value) : base(kind)
        {
            this.SlotCount = 0;
            this._value = value;
        }
    }

    partial class BinaryOperationExpressionSample : global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample
    {
        internal BinaryOperationExpressionSample(global::Tsu.Trees.RedGreen.Sample.SampleKind kind, global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample left, global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample right) : base(kind)
        {
            this.SlotCount = 2;
            this._left = left;
            this._right = right;
        }
    }

    partial class FunctionCallExpressionSample : global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample
    {
        internal FunctionCallExpressionSample(global::Tsu.Trees.RedGreen.Sample.SampleKind kind, global::Tsu.Trees.RedGreen.Sample.Internal.IdentifierExpressionSample identifier, global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample firstArg, global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample secondArg) : base(kind)
        {
            this.SlotCount = 3;
            this.identifier = identifier;
            this.firstArg = firstArg;
            this.secondArg = secondArg;
        }
    }
}

