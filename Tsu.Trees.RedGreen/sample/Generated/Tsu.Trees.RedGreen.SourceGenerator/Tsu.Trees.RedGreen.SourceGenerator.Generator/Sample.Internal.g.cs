// <auto-generated />

#nullable enable

using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;

namespace Tsu.Trees.RedGreen.Sample.Internal
{
    abstract partial class GreenNode : global::Tsu.Trees.RedGreen.Internal.IGreenNode<global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode, global::Tsu.Trees.RedGreen.Sample.SampleNode, global::Tsu.Trees.RedGreen.Sample.SampleKind>
    {
        private readonly global::Tsu.Trees.RedGreen.Sample.SampleKind _kind;
        private byte _slotCount;

        protected GreenNode(global::Tsu.Trees.RedGreen.Sample.SampleKind kind)
        {
            this._kind = kind;
        }

        public global::Tsu.Trees.RedGreen.Sample.SampleKind Kind => this._kind;

        public int SlotCount
        {
            get
            {
                int count = this._slotCount;
                if (count == byte.MaxValue)
                    count = this.GetSlotCount();
                return count;
            }
            protected set => _slotCount = (byte) value;
        }

        public abstract global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode? GetSlot(int index);

        public global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode GetRequiredSlot(int index)
        {
            var node = this.GetSlot(index);
            Debug.Assert(node != null);
            return node!;
        }

        protected virtual int GetSlotCount() => _slotCount;

        public global::System.Collections.Generic.IEnumerable<global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode> ChildNodes()
        {
            var count = this.SlotCount;
            for (var index = 0; index < count; index++)
                yield return this.GetRequiredSlot(index);
        }

        public global::System.Collections.Generic.IEnumerable<global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode> EnumerateDescendants()
        {
            var stack = new Stack<global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode>(24);
            stack.Push(this);

            while (stack.Count > 0)
            {
                var current = stack.Pop();

                yield return current;

                foreach (var child in current.ChildNodes().Reverse())
                {
                    stack.Push(child);
                }
            }
        }

        public virtual bool IsEquivalentTo([NotNullWhen(true)] global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode? other)
        {
            if (this == other) return true;
            if (other == null) return false;
            if (this.Kind != other.Kind) return false;

            var n = this.SlotCount;
            if (n != other.SlotCount) return false;

            for (int i = 0; i < n; i++)
            {
                var thisChild = this.GetSlot(i);
                var otherChild = other.GetSlot(i);
                if (thisChild != null && otherChild != null && !thisChild.IsEquivalentTo(otherChild))
                {
                    return false;
                }
            }

            return true;
        }

        public global::Tsu.Trees.RedGreen.Sample.SampleNode CreateRed() => this.CreateRed(null);
        public abstract global::Tsu.Trees.RedGreen.Sample.SampleNode CreateRed(global::Tsu.Trees.RedGreen.Sample.SampleNode? parent);
        public abstract void Accept(Tsu.Trees.RedGreen.Sample.Internal.SampleVisitor visitor);
        public abstract TResult? Accept<TResult>(Tsu.Trees.RedGreen.Sample.Internal.SampleVisitor<TResult> visitor);
        public abstract TResult? Accept<T1, TResult>(Tsu.Trees.RedGreen.Sample.Internal.SampleVisitor<T1, TResult> visitor, T1 arg1);
        public abstract TResult? Accept<T1, T2, TResult>(Tsu.Trees.RedGreen.Sample.Internal.SampleVisitor<T1, T2, TResult> visitor, T1 arg1, T2 arg2);
        public abstract TResult? Accept<T1, T2, T3, TResult>(Tsu.Trees.RedGreen.Sample.Internal.SampleVisitor<T1, T2, T3, TResult> visitor, T1 arg1, T2 arg2, T3 arg3);
    }

    abstract partial class ExpressionSample : global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode
    {
        protected ExpressionSample(global::Tsu.Trees.RedGreen.Sample.SampleKind kind) : base(kind)
        {
        }
    }

    partial class IdentifierExpressionSample : global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample
    {
        internal IdentifierExpressionSample(global::Tsu.Trees.RedGreen.Sample.SampleKind kind, string name) : base(kind)
        {
            this.SlotCount = 0;
            this._name = name;
        }

        public string Name => this._name;

        public override global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode? GetSlot(int index) =>
            null;

        public override global::Tsu.Trees.RedGreen.Sample.SampleNode CreateRed(global::Tsu.Trees.RedGreen.Sample.SampleNode? parent) =>
            new global::Tsu.Trees.RedGreen.Sample.IdentifierExpressionSample(this, parent);
        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override void Accept(Tsu.Trees.RedGreen.Sample.Internal.SampleVisitor visitor) => visitor.VisitIdentifierExpression(this);
        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<TResult>(Tsu.Trees.RedGreen.Sample.Internal.SampleVisitor<TResult> visitor) => visitor.VisitIdentifierExpression(this);
        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, TResult>(Tsu.Trees.RedGreen.Sample.Internal.SampleVisitor<T1, TResult> visitor, T1 arg1) => visitor.VisitIdentifierExpression(this, arg1);
        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, TResult>(Tsu.Trees.RedGreen.Sample.Internal.SampleVisitor<T1, T2, TResult> visitor, T1 arg1, T2 arg2) => visitor.VisitIdentifierExpression(this, arg1, arg2);
        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, T3, TResult>(Tsu.Trees.RedGreen.Sample.Internal.SampleVisitor<T1, T2, T3, TResult> visitor, T1 arg1, T2 arg2, T3 arg3) => visitor.VisitIdentifierExpression(this, arg1, arg2, arg3);

        public global::Tsu.Trees.RedGreen.Sample.Internal.IdentifierExpressionSample Update(string name)
        {
            if (name != this.Name)
            {
                return global::Tsu.Trees.RedGreen.Sample.Internal.SampleFactory.IdentifierExpression(name);
            }

            return this;
        }
    }

    partial class NumericalLiteralExpressionSample : global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample
    {
        internal NumericalLiteralExpressionSample(global::Tsu.Trees.RedGreen.Sample.SampleKind kind, double value) : base(kind)
        {
            this.SlotCount = 0;
            this._value = value;
        }

        public double Value => this._value;

        public override global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode? GetSlot(int index) =>
            null;

        public override global::Tsu.Trees.RedGreen.Sample.SampleNode CreateRed(global::Tsu.Trees.RedGreen.Sample.SampleNode? parent) =>
            new global::Tsu.Trees.RedGreen.Sample.NumericalLiteralExpressionSample(this, parent);
        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override void Accept(Tsu.Trees.RedGreen.Sample.Internal.SampleVisitor visitor) => visitor.VisitNumericalLiteralExpression(this);
        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<TResult>(Tsu.Trees.RedGreen.Sample.Internal.SampleVisitor<TResult> visitor) => visitor.VisitNumericalLiteralExpression(this);
        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, TResult>(Tsu.Trees.RedGreen.Sample.Internal.SampleVisitor<T1, TResult> visitor, T1 arg1) => visitor.VisitNumericalLiteralExpression(this, arg1);
        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, TResult>(Tsu.Trees.RedGreen.Sample.Internal.SampleVisitor<T1, T2, TResult> visitor, T1 arg1, T2 arg2) => visitor.VisitNumericalLiteralExpression(this, arg1, arg2);
        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, T3, TResult>(Tsu.Trees.RedGreen.Sample.Internal.SampleVisitor<T1, T2, T3, TResult> visitor, T1 arg1, T2 arg2, T3 arg3) => visitor.VisitNumericalLiteralExpression(this, arg1, arg2, arg3);

        public global::Tsu.Trees.RedGreen.Sample.Internal.NumericalLiteralExpressionSample Update(double value)
        {
            if (value != this.Value)
            {
                return global::Tsu.Trees.RedGreen.Sample.Internal.SampleFactory.NumericalLiteralExpression(value);
            }

            return this;
        }
    }

    partial class BinaryOperationExpressionSample : global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample
    {
        internal BinaryOperationExpressionSample(global::Tsu.Trees.RedGreen.Sample.SampleKind kind, global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample left, global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample right) : base(kind)
        {
            this.SlotCount = 2;
            this._left = left;
            this._right = right;
        }

        public global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample Left => this._left;
        public global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample Right => this._right;

        public override global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode? GetSlot(int index) =>
            index switch
            {
                0 => this.Left,
                1 => this.Right,
                _ => null
            };

        public override global::Tsu.Trees.RedGreen.Sample.SampleNode CreateRed(global::Tsu.Trees.RedGreen.Sample.SampleNode? parent) =>
            new global::Tsu.Trees.RedGreen.Sample.BinaryOperationExpressionSample(this, parent);
        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override void Accept(Tsu.Trees.RedGreen.Sample.Internal.SampleVisitor visitor) => visitor.VisitBinaryOperationExpression(this);
        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<TResult>(Tsu.Trees.RedGreen.Sample.Internal.SampleVisitor<TResult> visitor) => visitor.VisitBinaryOperationExpression(this);
        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, TResult>(Tsu.Trees.RedGreen.Sample.Internal.SampleVisitor<T1, TResult> visitor, T1 arg1) => visitor.VisitBinaryOperationExpression(this, arg1);
        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, TResult>(Tsu.Trees.RedGreen.Sample.Internal.SampleVisitor<T1, T2, TResult> visitor, T1 arg1, T2 arg2) => visitor.VisitBinaryOperationExpression(this, arg1, arg2);
        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, T3, TResult>(Tsu.Trees.RedGreen.Sample.Internal.SampleVisitor<T1, T2, T3, TResult> visitor, T1 arg1, T2 arg2, T3 arg3) => visitor.VisitBinaryOperationExpression(this, arg1, arg2, arg3);

        public global::Tsu.Trees.RedGreen.Sample.Internal.BinaryOperationExpressionSample Update(global::Tsu.Trees.RedGreen.Sample.SampleKind kind, global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample left, global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample right)
        {
            if (kind != this.Kind && left != this.Left && right != this.Right)
            {
                return global::Tsu.Trees.RedGreen.Sample.Internal.SampleFactory.BinaryOperationExpression(kind, left, right);
            }

            return this;
        }
    }

    partial class FunctionCallExpressionSample : global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample
    {
        internal FunctionCallExpressionSample(global::Tsu.Trees.RedGreen.Sample.SampleKind kind, global::Tsu.Trees.RedGreen.Sample.Internal.IdentifierExpressionSample identifier, global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample firstArg, global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample? secondArg) : base(kind)
        {
            this.SlotCount = 3;
            this.identifier = identifier;
            this.firstArg = firstArg;
            this.secondArg = secondArg;
        }

        public global::Tsu.Trees.RedGreen.Sample.Internal.IdentifierExpressionSample Identifier => this.identifier;
        public global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample FirstArg => this.firstArg;
        public global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample? SecondArg => this.secondArg;

        public override global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode? GetSlot(int index) =>
            index switch
            {
                0 => this.Identifier,
                1 => this.FirstArg,
                2 => this.SecondArg,
                _ => null
            };

        public override global::Tsu.Trees.RedGreen.Sample.SampleNode CreateRed(global::Tsu.Trees.RedGreen.Sample.SampleNode? parent) =>
            new global::Tsu.Trees.RedGreen.Sample.FunctionCallExpressionSample(this, parent);
        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override void Accept(Tsu.Trees.RedGreen.Sample.Internal.SampleVisitor visitor) => visitor.VisitFunctionCallExpression(this);
        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<TResult>(Tsu.Trees.RedGreen.Sample.Internal.SampleVisitor<TResult> visitor) => visitor.VisitFunctionCallExpression(this);
        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, TResult>(Tsu.Trees.RedGreen.Sample.Internal.SampleVisitor<T1, TResult> visitor, T1 arg1) => visitor.VisitFunctionCallExpression(this, arg1);
        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, TResult>(Tsu.Trees.RedGreen.Sample.Internal.SampleVisitor<T1, T2, TResult> visitor, T1 arg1, T2 arg2) => visitor.VisitFunctionCallExpression(this, arg1, arg2);
        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, T3, TResult>(Tsu.Trees.RedGreen.Sample.Internal.SampleVisitor<T1, T2, T3, TResult> visitor, T1 arg1, T2 arg2, T3 arg3) => visitor.VisitFunctionCallExpression(this, arg1, arg2, arg3);

        public global::Tsu.Trees.RedGreen.Sample.Internal.FunctionCallExpressionSample Update(global::Tsu.Trees.RedGreen.Sample.Internal.IdentifierExpressionSample identifier, global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample firstArg, global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample? secondArg)
        {
            if (identifier != this.Identifier && firstArg != this.FirstArg && secondArg != this.SecondArg)
            {
                return global::Tsu.Trees.RedGreen.Sample.Internal.SampleFactory.FunctionCallExpression(identifier, firstArg, secondArg);
            }

            return this;
        }
    }

    internal static class SampleFactory
    {
        public static global::Tsu.Trees.RedGreen.Sample.Internal.IdentifierExpressionSample IdentifierExpression(string name)
        {
#if DEBUG
            if (name == null) throw new global::System.ArgumentNullException(nameof(name));
#endif // DEBUG

            return new global::Tsu.Trees.RedGreen.Sample.Internal.IdentifierExpressionSample(
            global::Tsu.Trees.RedGreen.Sample.SampleKind.IdentifierExpression, name);
        }

        public static global::Tsu.Trees.RedGreen.Sample.Internal.NumericalLiteralExpressionSample NumericalLiteralExpression(double value)
        {
#if DEBUG
#endif // DEBUG

            return new global::Tsu.Trees.RedGreen.Sample.Internal.NumericalLiteralExpressionSample(
            global::Tsu.Trees.RedGreen.Sample.SampleKind.NumericalLiteralExpression, value);
        }

        public static global::Tsu.Trees.RedGreen.Sample.Internal.BinaryOperationExpressionSample BinaryOperationExpression(global::Tsu.Trees.RedGreen.Sample.SampleKind kind, global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample left, global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample right)
        {
#if DEBUG
            if (left == null) throw new global::System.ArgumentNullException(nameof(left));
            if (right == null) throw new global::System.ArgumentNullException(nameof(right));
            switch (kind)
            {
                case Tsu.Trees.RedGreen.Sample.SampleKind.AdditionExpression:
                case Tsu.Trees.RedGreen.Sample.SampleKind.DivisionExpression:
                case Tsu.Trees.RedGreen.Sample.SampleKind.MultiplicationExpression:
                case Tsu.Trees.RedGreen.Sample.SampleKind.SubtractionExpression:
                    break;
                default:
                    throw new global::System.ArgumentException("Kind not accepted for this node.", nameof(kind));
            }
#endif // DEBUG

            return new global::Tsu.Trees.RedGreen.Sample.Internal.BinaryOperationExpressionSample(
            kind, left, right);
        }

        public static global::Tsu.Trees.RedGreen.Sample.Internal.FunctionCallExpressionSample FunctionCallExpression(global::Tsu.Trees.RedGreen.Sample.Internal.IdentifierExpressionSample identifier, global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample firstArg)
        {
#if DEBUG
            if (identifier == null) throw new global::System.ArgumentNullException(nameof(identifier));
            if (firstArg == null) throw new global::System.ArgumentNullException(nameof(firstArg));
#endif // DEBUG

            return new global::Tsu.Trees.RedGreen.Sample.Internal.FunctionCallExpressionSample(
            global::Tsu.Trees.RedGreen.Sample.SampleKind.FunctionCallExpression, identifier, firstArg, default);
        }

        public static global::Tsu.Trees.RedGreen.Sample.Internal.FunctionCallExpressionSample FunctionCallExpression(global::Tsu.Trees.RedGreen.Sample.Internal.IdentifierExpressionSample identifier, global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample firstArg, global::Tsu.Trees.RedGreen.Sample.Internal.ExpressionSample? secondArg)
        {
#if DEBUG
            if (identifier == null) throw new global::System.ArgumentNullException(nameof(identifier));
            if (firstArg == null) throw new global::System.ArgumentNullException(nameof(firstArg));
#endif // DEBUG

            return new global::Tsu.Trees.RedGreen.Sample.Internal.FunctionCallExpressionSample(
            global::Tsu.Trees.RedGreen.Sample.SampleKind.FunctionCallExpression, identifier, firstArg, secondArg);
        }
    }


    internal partial class SampleVisitor
    {
        public virtual void Visit(global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode? node)
        {
            if (node != null)
            {
                node.Accept(this);
            }
        }
        public virtual void VisitIdentifierExpression(global::Tsu.Trees.RedGreen.Sample.Internal.IdentifierExpressionSample node) => this.DefaultVisit(node);
        public virtual void VisitNumericalLiteralExpression(global::Tsu.Trees.RedGreen.Sample.Internal.NumericalLiteralExpressionSample node) => this.DefaultVisit(node);
        public virtual void VisitBinaryOperationExpression(global::Tsu.Trees.RedGreen.Sample.Internal.BinaryOperationExpressionSample node) => this.DefaultVisit(node);
        public virtual void VisitFunctionCallExpression(global::Tsu.Trees.RedGreen.Sample.Internal.FunctionCallExpressionSample node) => this.DefaultVisit(node);
        protected virtual void DefaultVisit(global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode node) { }
    }

    internal partial class SampleVisitor<TResult>
    {
        public virtual TResult? Visit(global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode? node) => node == null ? default : node.Accept(this
        );
        public virtual TResult? VisitIdentifierExpression(global::Tsu.Trees.RedGreen.Sample.Internal.IdentifierExpressionSample node) => this.DefaultVisit(node);
        public virtual TResult? VisitNumericalLiteralExpression(global::Tsu.Trees.RedGreen.Sample.Internal.NumericalLiteralExpressionSample node) => this.DefaultVisit(node);
        public virtual TResult? VisitBinaryOperationExpression(global::Tsu.Trees.RedGreen.Sample.Internal.BinaryOperationExpressionSample node) => this.DefaultVisit(node);
        public virtual TResult? VisitFunctionCallExpression(global::Tsu.Trees.RedGreen.Sample.Internal.FunctionCallExpressionSample node) => this.DefaultVisit(node);
        protected virtual TResult? DefaultVisit(global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode node) => default;
    }

    internal partial class SampleVisitor<T1, TResult>
    {
        public virtual TResult? Visit(global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode? node, T1 arg1) => node == null ? default : node.Accept(this
        , arg1);
        public virtual TResult? VisitIdentifierExpression(global::Tsu.Trees.RedGreen.Sample.Internal.IdentifierExpressionSample node, T1 arg1) => this.DefaultVisit(node, arg1);
        public virtual TResult? VisitNumericalLiteralExpression(global::Tsu.Trees.RedGreen.Sample.Internal.NumericalLiteralExpressionSample node, T1 arg1) => this.DefaultVisit(node, arg1);
        public virtual TResult? VisitBinaryOperationExpression(global::Tsu.Trees.RedGreen.Sample.Internal.BinaryOperationExpressionSample node, T1 arg1) => this.DefaultVisit(node, arg1);
        public virtual TResult? VisitFunctionCallExpression(global::Tsu.Trees.RedGreen.Sample.Internal.FunctionCallExpressionSample node, T1 arg1) => this.DefaultVisit(node, arg1);
        protected virtual TResult? DefaultVisit(global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode node, T1 arg1) => default;
    }

    internal partial class SampleVisitor<T1, T2, TResult>
    {
        public virtual TResult? Visit(global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode? node, T1 arg1, T2 arg2) => node == null ? default : node.Accept(this
        , arg1, arg2);
        public virtual TResult? VisitIdentifierExpression(global::Tsu.Trees.RedGreen.Sample.Internal.IdentifierExpressionSample node, T1 arg1, T2 arg2) => this.DefaultVisit(node, arg1, arg2);
        public virtual TResult? VisitNumericalLiteralExpression(global::Tsu.Trees.RedGreen.Sample.Internal.NumericalLiteralExpressionSample node, T1 arg1, T2 arg2) => this.DefaultVisit(node, arg1, arg2);
        public virtual TResult? VisitBinaryOperationExpression(global::Tsu.Trees.RedGreen.Sample.Internal.BinaryOperationExpressionSample node, T1 arg1, T2 arg2) => this.DefaultVisit(node, arg1, arg2);
        public virtual TResult? VisitFunctionCallExpression(global::Tsu.Trees.RedGreen.Sample.Internal.FunctionCallExpressionSample node, T1 arg1, T2 arg2) => this.DefaultVisit(node, arg1, arg2);
        protected virtual TResult? DefaultVisit(global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode node, T1 arg1, T2 arg2) => default;
    }

    internal partial class SampleVisitor<T1, T2, T3, TResult>
    {
        public virtual TResult? Visit(global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode? node, T1 arg1, T2 arg2, T3 arg3) => node == null ? default : node.Accept(this
        , arg1, arg2, arg3);
        public virtual TResult? VisitIdentifierExpression(global::Tsu.Trees.RedGreen.Sample.Internal.IdentifierExpressionSample node, T1 arg1, T2 arg2, T3 arg3) => this.DefaultVisit(node, arg1, arg2, arg3);
        public virtual TResult? VisitNumericalLiteralExpression(global::Tsu.Trees.RedGreen.Sample.Internal.NumericalLiteralExpressionSample node, T1 arg1, T2 arg2, T3 arg3) => this.DefaultVisit(node, arg1, arg2, arg3);
        public virtual TResult? VisitBinaryOperationExpression(global::Tsu.Trees.RedGreen.Sample.Internal.BinaryOperationExpressionSample node, T1 arg1, T2 arg2, T3 arg3) => this.DefaultVisit(node, arg1, arg2, arg3);
        public virtual TResult? VisitFunctionCallExpression(global::Tsu.Trees.RedGreen.Sample.Internal.FunctionCallExpressionSample node, T1 arg1, T2 arg2, T3 arg3) => this.DefaultVisit(node, arg1, arg2, arg3);
        protected virtual TResult? DefaultVisit(global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode node, T1 arg1, T2 arg2, T3 arg3) => default;
    }

    internal abstract class SampleWalker : global::Tsu.Trees.RedGreen.Sample.Internal.SampleVisitor
    {
        private int _recursionDepth;

        public override void Visit(global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode? node)
        {
            if (node != null)
            {
                _recursionDepth++;
                if (_recursionDepth > 30)
                {
                    global::System.Runtime.CompilerServices.RuntimeHelpers.EnsureSufficientExecutionStack();
                }

                node.Accept(this);

                _recursionDepth--;
            }
        }

        protected override void DefaultVisit(global::Tsu.Trees.RedGreen.Sample.Internal.GreenNode node)
        {
            foreach (var child in node.ChildNodes())
            {
                Visit(child);
            }
        }
    }
}

