// Copyright © 2024 GGG KILLER <gggkiller2@gmail.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the “Software”), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom
// the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

using Microsoft.CodeAnalysis;

namespace Tsu.Trees.RedGreen.SourceGenerator;

[Generator(LanguageNames.CSharp)]
public sealed class Generator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var roots = context.GetTreeInfos();
        var nodes = context.GetNodeInfos();

        var trees = TreeCreator.BuildTree(roots, nodes);

        context.RegisterPostInitializationOutput(ctx =>
        {
            ctx.AddSource("Initialized.g.cs", "// <auto-generated />");
        });

        context.RegisterSourceOutput(trees, (ctx, tree) =>
        {
            var builder = new StringBuilder();

            builder.AppendLine($"// GreenBase = {tree.GreenBase.ToCSharpString()}");
            builder.AppendLine($"// RedBase = {tree.RedBase.ToCSharpString()}");
            builder.AppendLine($"// KindEnum = {tree.KindEnum.ToCSharpString()}");
            builder.AppendLine($"// CreateVisitors = {tree.CreateVisitors}");
            builder.AppendLine($"// CreateWalker = {tree.CreateWalker}");
            builder.AppendLine($"// CreateRewriter = {tree.CreateRewriter}");
            builder.AppendLine($"// Root = {tree.Root.TypeSymbol.ToCSharpString()}");

            ctx.AddSource($"{tree.GreenBase.Name}.Debug.g.cs", builder.ToSourceText());
        });

        context.WriteGreenNodes(trees);
        context.WriteGreenFactory(trees);
    }
}