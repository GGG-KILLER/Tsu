using System.CodeDom.Compiler;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Tsu.Trees.RedGreen.SourceGenerator.Model;

namespace Tsu.Trees.RedGreen.SourceGenerator;

internal static class GreenTreeWriter
{
    public static void ValidateTrees(this IncrementalGeneratorInitializationContext context, IncrementalValuesProvider<Tree> trees)
    {
        // TODO: Implement
        return;
    }

    public static void WriteGreenNodes(this IncrementalGeneratorInitializationContext context, IncrementalValuesProvider<Tree> trees)
    {
        context.RegisterSourceOutput(trees, (ctx, tree) =>
        {
            var builder = new StringBuilder();
            var writer = new IndentedTextWriter(new StringWriter(builder));

            writer.WriteLine("// <auto-generated />");
            writer.WriteLine();

            writer.WriteLine("using System.Diagnostics;");
            writer.WriteLine();

            writer.Write("namespace ");
            writer.WriteLine(tree.GreenBase.ContainingNamespace.ToCSharpString());
            writer.WriteLine('{');
            writer.Indent++;

            writer.WriteGreenRoot(tree, tree.Root);

            var queue = new Queue<Node>();
            foreach (var node in tree.Root.Descendants)
                queue.Enqueue(node);

            while (queue.Count > 0)
            {
                var node = queue.Dequeue();
                foreach (var descendant in node.Descendants)
                    queue.Enqueue(descendant);
                writer.WriteGreenNode(tree, node);
            }

            writer.Indent--;
            writer.WriteLine('}');
            writer.WriteLine();

            writer.Flush();
            ctx.AddSource($"{tree.Suffix}.Internal.g.cs", builder.ToSourceText());
        });
    }

    public static void WriteGreenRoot(this IndentedTextWriter writer, Tree tree, Node root)
    {
        writer.Write("abstract partial class ");
        writer.Write(root.TypeSymbol.Name);
        writer.Write(" : global::Tsu.Trees.RedGreen.Internal.IGreenNode<");
        writer.Write(tree.GreenBase.ToCSharpString());
        writer.Write(", ");
        writer.Write(tree.RedBase.ToCSharpString());
        writer.Write(", ");
        writer.Write(tree.KindEnum.ToCSharpString());
        writer.WriteLine('>');
        writer.WriteLine('{');
        writer.Indent++;
        {
            #region Constructor
            writer.WriteGreenConstructor(root);
            #endregion Constructor
        }
        writer.Indent--;
        writer.WriteLine('}');
    }

    public static void WriteGreenNode(this IndentedTextWriter writer, Tree tree, Node node)
    {
        if (node.TypeSymbol.IsAbstract)
            writer.Write("abstract ");
        writer.Write("partial ");
        writer.Write("class ");
        writer.Write(node.TypeSymbol.Name);
        writer.Write(" : ");
        writer.WriteLine(tree.GreenBase.ToCSharpString());
        writer.WriteLine('{');
        writer.Indent++;
        {
            #region Constructor
            writer.WriteGreenConstructor(node);
            #endregion Constructor
        }
        writer.Indent--;
        writer.WriteLine('}');
    }

    private static void WriteGreenConstructor(this IndentedTextWriter writer, Node node)
    {
        if (node.TypeSymbol.IsAbstract)
            writer.Write("protected ");
        else
            writer.Write("internal ");
        writer.Write(node.TypeSymbol.Name);
        writer.Write('(');
        var first = false;
        foreach (var component in node.ExtraData)
        {
            if (!first) writer.Write(", ");
            writer.Write(component.Type.ToCSharpString());
            writer.Write(' ');
            writer.Write(component.Name);
        }
        foreach (var component in node.Children)
        {
            if (!first) writer.Write(", ");
            writer.Write(component.Type.ToCSharpString());
            writer.Write(' ');
            writer.Write(component.Name);
        }
        writer.Write(')');
        if (node.ExtraData.Any(x => x.PassToBase) || node.Children.Any(x => x.PassToBase))
        {
            writer.Write(" : base(");
            first = true;
            foreach (var component in node.ExtraData.Where(x => x.PassToBase))
            {
                if (!first) writer.Write(", ");
                writer.Write(component.Name);
            }
            foreach (var component in node.Children.Where(x => x.PassToBase))
            {
                if (!first) writer.Write(", ");
                writer.Write(component.Name);
            }
            writer.Write(')');
        }
        writer.WriteLine();
        writer.WriteLine('{');
        writer.Indent++;

        if (node.Descendants.IsDefaultOrEmpty)
        {
            if (node.Children.Length > byte.MaxValue)
                writer.WriteLine("this.SlotCount = byte.MaxValue;");
            else
                writer.WriteLine($"this.SlotCount = {node.Children.Length}");
        }

        foreach (var component in node.ExtraData)
        {
            writer.Write("this.");
            writer.Write(component.Name);
            writer.Write(" = ");
            writer.Write(component.Name);
            writer.WriteLine(';');
        }
        foreach (var component in node.Children)
        {
            writer.Write("this.");
            writer.Write(component.Name);
            writer.Write(" = ");
            writer.Write(component.Name);
            writer.WriteLine(';');
        }

        writer.Indent--;
        writer.WriteLine('}');
    }

    public static void WriteGreenFactory(this IncrementalGeneratorInitializationContext context, IncrementalValuesProvider<Tree> trees)
    {
    }
}