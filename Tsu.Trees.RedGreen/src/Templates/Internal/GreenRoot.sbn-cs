// <auto-generated />

#nullable enable

using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;

namespace {{ green_base.namespace_no_global }}
{
    abstract partial class {{ green_base.name }}
    {
{{~ for component in root.components ~}}
        private readonly {{ component.type.csharp }} {{ component.field_name }};
{{~ end ~}}
        private byte _slotCount;

        protected {{ green_base.name }}({{- for component in root.components -}}
    {{ if !for.first }}, {{ end }}{{ component.type.csharp }} {{ component.parameter_name }}
{{- end -}})
        {
{{~ for component in root.components ~}}
            this.{{ component.field_name }} = {{ component.parameter_name }};
{{~ end ~}}
        }

{{ for component in root.components ~}}
        public {{ component.type.csharp }} {{ component.property_name }} => this.{{ component.field_name }};
{{~ end ~}}

        public int SlotCount
        {
            get
            {
                int count = this._slotCount;
                if (count == byte.MaxValue)
                    count = this.GetSlotCount();
                return count;
            }
            protected set => _slotCount = (byte) value;
        }

        public abstract {{ green_base.csharp_no_nullable }}? GetSlot(int index);

        public {{ green_base.csharp_no_nullable }} GetRequiredSlot(int index)
        {
            var node = this.GetSlot(index);
            Debug.Assert(node != null);
            return node!;
        }

        protected virtual int GetSlotCount() => _slotCount;

        public global::System.Collections.Generic.IEnumerable<{{ green_base.csharp_no_nullable }}> ChildNodes()
        {
            var count = this.SlotCount;
            for (var index = 0; index < count; index++)
                yield return this.GetRequiredSlot(index);
        }

        public global::System.Collections.Generic.IEnumerable<{{ green_base.csharp_no_nullable }}> EnumerateDescendants()
        {
            var stack = new Stack<{{ green_base.csharp_no_nullable }}>(24);
            stack.Push(this);

            while (stack.Count > 0)
            {
                var current = stack.Pop();

                yield return current;

                foreach (var child in current.ChildNodes().Reverse())
                {
                    stack.Push(child);
                }
            }
        }

        public virtual bool IsEquivalentTo([NotNullWhen(true)] {{ green_base.csharp_no_nullable }}? other)
        {
            if (this == other) return true;
            if (other == null) return false;
{{~ for component in root.components ~}}
            if (this.{{ component.property_name }} != other.{{ component.property_name }}) return false;
{{~ end ~}}

            var n = this.SlotCount;
            if (n != other.SlotCount) return false;

            for (int i = 0; i < n; i++)
            {
                var thisChild = this.GetSlot(i);
                var otherChild = other.GetSlot(i);
                if (thisChild != null && otherChild != null && !thisChild.IsEquivalentTo(otherChild))
                {
                    return false;
                }
            }

            return true;
        }

        public {{ red_base.csharp_no_nullable }} CreateRed() => this.CreateRed(null);
        public abstract {{ red_base.csharp_no_nullable }} CreateRed({{ red_base.csharp_no_nullable }}? parent);

{{~ if create_visitors || create_walker ~}}
        public abstract void Accept({{ green_base.namespace }}.{{ suffix }}Visitor visitor);
{{~ end ~}}
{{~ if create_visitors || create_rewriter ~}}
        public abstract TResult? Accept<TResult>({{ green_base.namespace }}.{{ suffix }}Visitor<TResult> visitor);
{{~ end ~}}
{{~ if create_visitors ~}}
        public abstract TResult? Accept<T1, TResult>({{ green_base.namespace }}.{{ suffix }}Visitor<T1, TResult> visitor, T1 arg1);
        public abstract TResult? Accept<T1, T2, TResult>({{ green_base.namespace }}.{{ suffix }}Visitor<T1, T2, TResult> visitor, T1 arg1, T2 arg2);
        public abstract TResult? Accept<T1, T2, T3, TResult>({{ green_base.namespace }}.{{ suffix }}Visitor<T1, T2, T3, TResult> visitor, T1 arg1, T2 arg2, T3 arg3);
{{~ end ~}}
    }
}