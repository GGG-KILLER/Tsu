// <auto-generated />

#nullable enable

namespace {{ green_base.namespace_no_global }}
{
{{~ for node in non_root_nodes ~}}
    partial class {{ node.type.name }} : {{ node.base.csharp_no_nullable }}
    {
        {{ if node.type.is_abstract -}}
        protected
        {{- else -}}
        internal
        {{- end }} {{ node.type.name }}(
            {{~ for component in node.components ~}}
            {{ component.type.csharp }} {{ component.parameter_name }}{{ if !for.last }},{{ end }}
            {{~ end ~}}
        )
            : base({{- for component in node.parent_components -}}{{ if !for.first }}, {{ end }}{{ component.parameter_name }}{{- end -}})
        {
            {{~ if node.descendants | array.size == 0 ~}}
                {{~ if node.children | array.size > 255 ~}}
            this.SlotCount = byte.MaxValue;
                {{~ else ~}}
            this.SlotCount = {{ node.children | array.size }};
                {{~ end ~}}
            {{~ end ~}}
            {{~ for component in node.node_components ~}}
            this.{{ component.field_name }} = {{ component.parameter_name }};
            {{~ end ~}}
        }

        {{~ for component in node.node_components ~}}
        public {{ component.type.csharp }} {{ component.property_name }} => {{ component.field_name }};
        {{~ end ~}}

        {{~ if !node.type.is_abstract ~}}
        public override {{ green_base.csharp_no_nullable }}? GetSlot(int index) =>
        {{~ if node.children | array.size == 0 ~}}
            null;
        {{~ else if node.children | array.size == 1 ~}}
            index == 0 ? this.{{ node.children[0].field_name }} : null;
        {{~ else ~}}
            index switch
            {
                {{~ for child in node.children ~}}
                {{ for.index }} => this.{{ child.field_name }},
                {{~ end ~}}
                _ => null
            };
        {{~ end ~}}
        {{~ end ~}}

        {{~ if !node.type.is_abstract ~}}
        public override {{ red_base.csharp_no_nullable }} CreateRed({{ red_base.csharp_no_nullable }}? parent) =>
            new {{ red_base.namespace }}.{{ node.type.name }}(this, parent);
        {{~ end ~}}

        {{~ if !node.type.is_abstract && (create_visitors || create_walker) ~}}
        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override void Accept({{ green_base.namespace }}.{{ suffix }}Visitor visitor) =>
            visitor.Visit{{ node.type.name | nosuffix }}(this);
        {{~ end ~}}

        {{~ if !node.type.is_abstract && (create_visitors || create_rewriter) ~}}
        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<TResult>({{ green_base.namespace }}.{{ suffix }}Visitor<TResult> visitor) =>
            visitor.Visit{{ node.type.name | nosuffix }}(this);
        {{~ end ~}}

        {{~ if !node.type.is_abstract && create_visitors ~}}
        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, TResult>({{ green_base.namespace }}.{{ suffix }}Visitor<T1, TResult> visitor, T1 arg1) =>
            visitor.Visit{{ node.type.name | nosuffix }}(this, arg1);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, TResult>({{ green_base.namespace }}.{{ suffix }}Visitor<T1, T2, TResult> visitor, T1 arg1, T2 arg2) =>
            visitor.Visit{{ node.type.name | nosuffix }}(this, arg1, arg2);

        [return: global::System.Diagnostics.CodeAnalysis.MaybeNull]
        public override TResult Accept<T1, T2, T3, TResult>({{ green_base.namespace }}.{{ suffix }}Visitor<T1, T2, T3, TResult> visitor, T1 arg1, T2 arg2, T3 arg3) =>
            visitor.Visit{{ node.type.name | nosuffix }}(this, arg1, arg2, arg3);
        {{~ end ~}}

        {{~ if !node.type.is_abstract && (node.required_components | array.size) > 0 ~}}
        public {{ node.type.csharp_no_nullable}} Update(
            {{~ for component in node.required_components ~}}
            {{ component.type.csharp }} {{ component.parameter_name }}{{ if !for.last }},{{ end }}
            {{~ end ~}}
        )
        {
            if (
                {{~ for component in node.required_components ~}}
                {{ if !for.first }}&& {{ end }}this.{{ component.property_name }} != {{ component.parameter_name }}
                {{~ end ~}}
            )
            {
                return {{ green_base.namespace }}.{{ suffix }}Factory.{{ node.type.name | nosuffix }}(
                    {{~ for component in node.required_components ~}}
                    {{ component.parameter_name }}{{ if !for.last }},{{ end }}
                    {{~ end ~}}
                );
            }

            return this;
        }
        {{~ end ~}}
    }
{{~ end ~}}
}