{{~
if create_lists
    green_node = green_base.csharp | not_null
~}}
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// Modified by the Tsu (https://github.com/GGG-KILLER/Tsu) project for embedding into other projects.
// <auto-generated />

#nullable enable

namespace {{ green_base.namespace | not_global }}
{
    {{ green_base.accessibility }} partial class {{ suffix }}List
    {
        {{ green_base.accessibility }} class WithTwoChildren : {{ suffix }}List
        {
            private readonly {{ green_node }} _child0;
            private readonly {{ green_node }} _child1;

            {{ green_base.accessibility }} WithTwoChildren({{ green_node }} child0, {{ green_node }} child1)
            {
                SlotCount = 2;
                _child0 = child0;
                _child1 = child1;
            }

            public override {{ green_node }}? GetSlot(int index)
            {
                return index switch
                {
                    0 => _child0,
                    1 => _child1,
                    _ => null,
                };
            }

            internal override void CopyTo({{ green_node }}[] array, int offset)
            {
                array[offset] = _child0;
                array[offset + 1] = _child1;
            }

            public override {{ red_base.csharp | not_null }} CreateRed({{ red_base.csharp | not_null }}? parent) =>
                new {{ red_base.namespace }}.{{ suffix }}List.WithTwoChildren(this, parent);
        }
    }
}
{{~ end ~}}