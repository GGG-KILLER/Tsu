{{~
if create_lists
    green_node = green_base.csharp | not_null
~}}
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// Modified by the Tsu (https://github.com/GGG-KILLER/Tsu) project for embedding into other projects.
// <auto-generated />

#nullable enable

namespace {{ green_base.namespace | not_global }}
{
    {{ green_base.accessibility }} partial class {{ suffix }}List
    {
        {{ green_base.accessibility }} sealed class WithManyChildren : {{ suffix }}List
        {
            internal readonly {{ green_node }}[] children;

            {{ green_base.accessibility }} WithManyChildren({{ green_node }}[] children)
            {
                this.children = children;
                int n = children.Length;
                if (n < byte.MaxValue)
                {
                    SlotCount = (byte) n;
                }
                else
                {
                    SlotCount = byte.MaxValue;
                }
            }

            protected override int GetSlotCount() => children.Length;

            public override {{ green_node }} GetSlot(int index) => children[index];

            internal override void CopyTo({{ green_node }}[] array, int offset) =>
                Array.Copy(children, 0, array, offset, children.Length);

            public override {{ red_base.csharp | not_null }} CreateRed({{ red_base.csharp | not_null }}? parent) =>
                new {{ red_base.namespace }}.{{ suffix }}List.WithManyChildren(this, parent);
        }
    }
}
{{~ end ~}}