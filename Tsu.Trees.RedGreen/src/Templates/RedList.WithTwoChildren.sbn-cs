{{~ if create_lists ~}}
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// Modified by the Tsu (https://github.com/GGG-KILLER/Tsu) project for embedding into other projects.
// <auto-generated />

#nullable enable

namespace {{ red_base.namespace | not_global }}
{
    // This is supposed to be a hidden node so it is marked as internal.
    internal abstract partial class {{ suffix }}List : {{ red_base.csharp | not_null }}
    {
        // This is supposed to be a hidden node so it is marked as internal.
        internal class WithTwoChildren : {{ suffix }}List
        {
            private {{ red_base.csharp | not_null }}? _child0;
            private {{ red_base.csharp | not_null }}? _child1;

            internal WithTwoChildren({{ green_base.namespace }}.{{ suffix }}List green, {{ red_base.csharp | not_null }}? parent)
                : base(green, parent)
            {
            }

            internal override {{ red_base.csharp | not_null }}? GetNodeSlot(int index)
            {
                return index switch
                {
                    0 => GetRedElement(ref _child0, 0),
                    1 => GetRedElementIfNotToken(ref _child1),
                    _ => null,
                };
            }
        }
    }
}
{{~ end ~}}