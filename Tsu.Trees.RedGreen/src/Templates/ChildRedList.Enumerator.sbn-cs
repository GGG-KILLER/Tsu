// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// Modified by the Tsu (https://github.com/GGG-KILLER/Tsu) project for embedding into other projects.
// <auto-generated />

#nullable enable

namespace {{ red_base.namespace | not_global }}
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;

    {{ red_base.accessibility }} readonly partial struct Child{{ suffix }}List
    {
        /// <summary>
        /// Enumerates the elements of a <see cref="Child{{ suffix }}List" />.
        /// </summary>
        {{ red_base.accessibility }} struct Enumerator
        {
            private {{ red_base.csharp | not_null }}? _node;
            private int _count;
            private int _childIndex;

            internal Enumerator({{ red_base.csharp | not_null }}? node, int count)
            {
                _node = node;
                _count = count;
                _childIndex = -1;
            }

            // PERF: Initialize an Enumerator directly from a {{ red_base.name }} without going
            // via ChildNodes. This saves constructing an intermediate Child{{ suffix }}List
            internal void InitializeFrom({{ red_base.csharp | not_null }} node)
            {
                _node = node;
                _count = CountNodes(node.Green);
                _childIndex = -1;
            }

            /// <summary>Advances the enumerator to the next element of the <see cref="Child{{ suffix }}List" />.</summary>
            /// <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
            [MemberNotNullWhen(true, nameof(_node))]
            public bool MoveNext()
            {
                if (_node != null)
                {
                    var newIndex = _childIndex + 1;
                    if (newIndex < _count)
                    {
                        _childIndex = newIndex;
                        return true;
                    }
                }

                return false;
            }

            /// <summary>Gets the element at the current position of the enumerator.</summary>
            /// <returns>The element in the <see cref="Child{{ suffix }}List" /> at the current position of the enumerator.</returns>
            public {{ red_base.csharp | not_null }} Current
            {
                get
                {
                    if (_node is null)
                        throw new InvalidOperationException("No node to iterate over the children of.");
                    return ItemInternal(_node, _childIndex);
                }
            }

            /// <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
            public void Reset() => _childIndex = -1;
        }

        private class EnumeratorImpl : IEnumerator<{{ red_base.csharp | not_null }}>
        {
            private Enumerator _enumerator;

            internal EnumeratorImpl({{ red_base.csharp | not_null }}? node, int count)
            {
                _enumerator = new Enumerator(node, count);
            }

            /// <summary>
            /// Gets the element in the collection at the current position of the enumerator.
            /// </summary>
            /// <returns>
            /// The element in the collection at the current position of the enumerator.
            ///   </returns>
            public {{ red_base.csharp | not_null }} Current => _enumerator.Current;

            /// <summary>
            /// Gets the element in the collection at the current position of the enumerator.
            /// </summary>
            /// <returns>
            /// The element in the collection at the current position of the enumerator.
            ///   </returns>
            object IEnumerator.Current => _enumerator.Current;

            /// <summary>
            /// Advances the enumerator to the next element of the collection.
            /// </summary>
            /// <returns>
            /// true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            /// </returns>
            public bool MoveNext() => _enumerator.MoveNext();

            /// <summary>
            /// Sets the enumerator to its initial position, which is before the first element in the collection.
            /// </summary>
            public void Reset() => _enumerator.Reset();

            /// <summary>
            /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            /// </summary>
            public void Dispose()
            { }
        }
    }
}