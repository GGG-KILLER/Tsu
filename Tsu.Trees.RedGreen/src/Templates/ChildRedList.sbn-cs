// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// Modified by the Tsu (https://github.com/GGG-KILLER/Tsu) project for embedding into other projects.
// <auto-generated />

#nullable enable

namespace {{ red_base.namespace | not_global }}
{
    using System.Collections;
    using System.Collections.Generic;

    /// <summary>
    /// A list containing all children of a {{ suffix }} node.
    /// </summary>
    {{ red_base.accessibility }} readonly partial struct Child{{ suffix }}List : IEquatable<Child{{ suffix }}List>, IReadOnlyList<{{ red_base.csharp | not_null }}>
    {
        private readonly {{ red_base.csharp | not_null }}? _node;
        private readonly int _count;

        internal Child{{ suffix }}List({{ red_base.csharp | not_null }} node)
        {
            _node = node;
            _count = CountNodes(node.Green);
        }

        /// <summary>
        /// Gets the number of children contained in the <see cref="Child{{ suffix }}List"/>.
        /// </summary>
        public int Count => _count;

        internal static int CountNodes({{ green_base.csharp | not_null }} green)
        {
            int n = 0;

            for (int i = 0, s = green.SlotCount; i < s; i++)
            {
                var child = green.GetSlot(i);
                if (child != null)
                {
                    if (!child.IsList)
                    {
                        n++;
                    }
                    else
                    {
                        n += child.SlotCount;
                    }
                }
            }

            return n;
        }

        /// <summary>Gets the child at the specified index.</summary>
        /// <param name="index">The zero-based index of the child to get.</param>
        /// <exception cref="System.ArgumentOutOfRangeException">
        ///   <paramref name="index"/> is less than 0.-or-<paramref name="index" /> is equal to or greater than <see cref="Child{{ suffix }}List.Count"/>. </exception>
        public {{ red_base.csharp | not_null }} this[int index]
        {
            get
            {
                if (unchecked((uint) index < (uint) _count))
                {
                    return ItemInternal(_node!, index);
                }

                throw new ArgumentOutOfRangeException(nameof(index));
            }
        }

        internal {{ red_base.csharp | not_null }}? Node => _node;

        private static int Occupancy({{ green_base.csharp | not_null }} green) => green.IsList ? green.SlotCount : 1;

        /// <summary>
        /// internal indexer that does not verify index.
        /// Used when caller has already ensured that index is within bounds.
        /// </summary>
        internal static {{ red_base.csharp | not_null }} ItemInternal({{ red_base.csharp | not_null }} node, int index)
        {
            {{ green_base.csharp | not_null }}? greenChild;
            var green = node.Green;
            var idx = index;
            var slotIndex = 0;

            {{~ ## TODO: Replace for a non-loop? ## ~}}
            // find a slot that contains the node or its parent list (if node is in a list)
            // we will be skipping whole slots here so we will not loop for long (hopefully)
            //
            // at the end of this loop we will have
            // 1) slot index - slotIdx
            // 2) if the slot is a list, node index in the list - idx
            while (true)
            {
                greenChild = green.GetSlot(slotIndex);
                if (greenChild != null)
                {
                    int currentOccupancy = Occupancy(greenChild);
                    if (idx < currentOccupancy)
                    {
                        break;
                    }

                    idx -= currentOccupancy;
                }

                slotIndex++;
            }

            // get node that represents this slot
            var red = node.GetRequiredNodeSlot(slotIndex);
            if (greenChild.IsList)
            {
                // it is a red list of nodes, most common case
                return red.GetRequiredNodeSlot(idx);
            }

            // this is a single node
            return red;
        }

#if DEBUG
        [Obsolete("For debugging only", true)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("CodeQuality", "IDE0051:Remove unused private members", Justification = "For debugging only")]
        private {{ red_base.csharp | not_null }}[] Nodes => this.ToArray();
#endif

        /// <summary>
        /// Checks whether this list contains any elements.
        /// </summary>
        /// <returns></returns>
        public bool Any() => _count != 0;

        /// <summary>
        /// Returns the first child in the list.
        /// </summary>
        /// <returns>The first child in the list.</returns>
        /// <exception cref="System.InvalidOperationException">The list is empty.</exception>
        public {{ red_base.csharp | not_null }} First()
        {
            if (Any())
            {
                return this[0];
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Returns the last child in the list.
        /// </summary>
        /// <returns>The last child in the list.</returns>
        /// <exception cref="System.InvalidOperationException">The list is empty.</exception>
        public {{ red_base.csharp | not_null }} Last()
        {
            if (Any())
            {
                return this[_count - 1];
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Returns a list which contains all children of <see cref="Child{{ suffix }}List"/> in reversed order.
        /// </summary>
        /// <returns><see cref="Reversed"/> which contains all children of <see cref="Child{{ suffix }}List"/> in reversed order</returns>
        public Reversed Reverse()
        {
            global::System.Diagnostics.Debug.Assert(_node is not null);
            return new Reversed(_node, _count);
        }

        /// <summary>Returns an enumerator that iterates through the <see cref="Child{{ suffix }}List"/>.</summary>
        /// <returns>A <see cref="Enumerator"/> for the <see cref="Child{{ suffix }}List"/>.</returns>
        public Enumerator GetEnumerator()
        {
            if (_node == null)
            {
                return default;
            }

            return new Enumerator(_node, _count);
        }

        IEnumerator<{{ red_base.csharp | not_null }}> IEnumerable<{{ red_base.csharp | not_null }}>.GetEnumerator()
        {
            return new EnumeratorImpl(_node, _count);
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return new EnumeratorImpl(_node, _count);
        }

        /// <summary>Determines whether the specified object is equal to the current instance.</summary>
        /// <returns>true if the specified object is a <see cref="Child{{ suffix }}List" /> structure and is equal to the current instance; otherwise, false.</returns>
        /// <param name="obj">The object to be compared with the current instance.</param>
        public override bool Equals(object? obj) =>
            obj is Child{{ suffix }}List list && Equals(list);

        /// <summary>Determines whether the specified <see cref="Child{{ suffix }}List" /> structure is equal to the current instance.</summary>
        /// <returns>true if the specified <see cref="Child{{ suffix }}List" /> structure is equal to the current instance; otherwise, false.</returns>
        /// <param name="other">The <see cref="Child{{ suffix }}List" /> structure to be compared with the current instance.</param>
        public bool Equals(Child{{ suffix }}List other) => _node == other._node;

        /// <summary>Returns the hash code for the current instance.</summary>
        /// <returns>A 32-bit signed integer hash code.</returns>
        public override int GetHashCode() => _node?.GetHashCode() ?? 0;

        /// <summary>Indicates whether two <see cref="Child{{ suffix }}List" /> structures are equal.</summary>
        /// <returns>true if <paramref name="list1" /> is equal to <paramref name="list2" />; otherwise, false.</returns>
        /// <param name="list1">The <see cref="Child{{ suffix }}List" /> structure on the left side of the equality operator.</param>
        /// <param name="list2">The <see cref="Child{{ suffix }}List" /> structure on the right side of the equality operator.</param>
        public static bool operator ==(Child{{ suffix }}List list1, Child{{ suffix }}List list2) =>
            list1.Equals(list2);

        /// <summary>Indicates whether two <see cref="Child{{ suffix }}List" /> structures are unequal.</summary>
        /// <returns>true if <paramref name="list1" /> is equal to <paramref name="list2" />; otherwise, false.</returns>
        /// <param name="list1">The <see cref="Child{{ suffix }}List" /> structure on the left side of the inequality operator.</param>
        /// <param name="list2">The <see cref="Child{{ suffix }}List" /> structure on the right side of the inequality operator.</param>
        public static bool operator !=(Child{{ suffix }}List list1, Child{{ suffix }}List list2) =>
            !list1.Equals(list2);
    }
}