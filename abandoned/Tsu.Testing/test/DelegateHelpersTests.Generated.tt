<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" encoding="utf-8" #>
<#
    // The max type params in the BCL delegate types (in Func<...> and Action<...> at least)
    const Int32 maxTypeParams = 16;

    IEnumerable<String> getseq ( Int32 count, String prefix = "a" ) =>
        Enumerable.Range ( 1, count ).Select ( n => $"{prefix}{n}" );
#>
/*
 * Copyright © 2020 GGG KILLER <gggkiller2@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the “Software”), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Tsu.Testing.Tests
{
    public partial class DelegateHelpersTests
    {
        [TestMethod]
        public void TrackInvocationCountImplementedCorrectlyForAction ( )
        {
            var callCount = 0;
            DelegateInvocationCounter<Action> counter = DelegateHelpers.TrackInvocationCount ( ( ) =>
            {
                callCount++;
            });

            for ( var i = 1; i < 6; i++ )
            {
                counter.WrappedDelegate ( );

                Assert.AreEqual ( i, counter.InvocationCount );
                Assert.AreEqual ( i, callCount );
            }

            counter.Reset ( );
            Assert.AreEqual ( 0, counter.InvocationCount );
        }
<#
for ( var i = 1; i < maxTypeParams + 1; i++ )
{
    // The sequence of String types for use as type parameters
    var types = Enumerable.Range ( 1, i ).Select ( x => "String" );
    var typesGenerics = String.Join ( ", ", types );

    // The sequence of arguments for use in argument lists
    var args = getseq ( i, "arg" );
    var argsList = String.Join ( ", ", args );
#>

        [TestMethod]
        public void TrackInvocationCountImplementedCorrectlyForAction<#=i.ToString("00")#> ( )
        {
            var callCount = 0;
            DelegateInvocationCounter<Action<<#=typesGenerics#>>> counter = DelegateHelpers.TrackInvocationCount<<#=typesGenerics#>> ( ( <#=argsList#> ) =>
            {
                callCount++;
<# foreach ( var arg in args ) { #>
                Assert.AreEqual ( "<#=arg#>", <#=arg#> );
<# } #>
            });

            for ( var i = 1; i < 6; i++ )
            {
                counter.WrappedDelegate ( <#=String.Join ( ", ", args.Select ( arg => '"' + arg + '"' ) )#> );

                Assert.AreEqual ( i, counter.InvocationCount );
                Assert.AreEqual ( i, callCount );
            }

            counter.Reset ( );
            Assert.AreEqual ( 0, counter.InvocationCount );
        }

<#}#>

        [TestMethod]
        public void TrackInvocationCountImplementedCorrectlyForFunc ( )
        {
            var callCount = 0;
            DelegateInvocationCounter<Func<Int32>> counter = DelegateHelpers.TrackInvocationCount<Int32> ( ( ) =>
            {
                callCount++;
                return 12 + callCount;
            });

            for ( var i = 1; i < 6; i++ )
            {
                var ret = counter.WrappedDelegate ( );

                Assert.AreEqual ( i, counter.InvocationCount );
                Assert.AreEqual ( i, callCount );
                Assert.AreEqual ( 12 + i, ret );
            }
        }
<#
for ( var i = 1; i < maxTypeParams + 1; i++ )
{
    var types = Enumerable.Range ( 1, i ).Select ( x => "String" );
    var typesGenerics = String.Join ( ", ", types );

    var args = getseq ( i, "arg" );
    var argsList = String.Join ( ", ", args );
#>

        [TestMethod]
        public void TrackInvocationCountImplementedCorrectlyForFunc<#=i.ToString("00")#> ( )
        {
            var callCount = 0;
            DelegateInvocationCounter<Func<<#=typesGenerics#>, Int32>> counter = DelegateHelpers.TrackInvocationCount<<#=typesGenerics#>, Int32> ( ( <#=argsList#> ) =>
            {
                callCount++;
<# foreach ( var arg in args ) { #>
                Assert.AreEqual ( "<#=arg#>", <#=arg#> );
<# } #>
                return 12 + callCount;
            });

            for ( var i = 1; i < 6; i++ )
            {
                var ret = counter.WrappedDelegate ( <#=String.Join ( ", ", args.Select ( arg => '"' + arg + '"' ) )#> );

                Assert.AreEqual ( i, counter.InvocationCount );
                Assert.AreEqual ( i, callCount );
                Assert.AreEqual ( 12 + i, ret );
            }
        }

<#}#>
    }
}